#!/usr/bin/env node

var path = require('path');
var program = require('commander');
const chalk = require('chalk');
const buildScript = require('../cli/index.js');
const alipayWxCli = require('./alipay-wx');
const alipayBaiduCli = require('./alipay-baidu');
const alipayToBaidu = require('../cli/alipay-baidu/index');
const alipayToWx = require('../cli/alipay-wechat/index');
const inputDirPath = process.cwd() + '/';
const entryProcess = require('./entry');
const {
    recordOptions
} = require('../cli/utils');
/**
 * read packageJson
 */
const packageJson = require('../package.json');
let specialtypeCmd = false;
const options = {
    input: '',
    output: '',
    env: 'production',
    remote: false
};



program
    .version(packageJson.version)
    .option('-t, --type <type>', 'Which plugin to be used.')
    .option('-i, --input <type>', 'Input path of compiled code.')
    .option('-o, --output <type>', 'Output path of compiled code.')
    .option('-e, --env <type>', 'Compiling in development mode or production mode.')
    .option('-s, --scope <type>', 'Compiling component in scope mode.')
    .option('-r, --remote <type>', 'Pull ployfill from remote sources.');

program.parse(process.argv);

options.input = program.input;
options.defaultInput = inputDirPath;
options.output = program.output;
options.env = program.env || options.env;
options.remote = program.remote || options.remote;
options.scope = program.scope || false;
options.type = program.type;

/**
 * $ antmove wx-alipay ../alipay-app
 * */
program
    .version(packageJson.version)
    .command('wx-alipay')
    .action(function () {
        specialtypeCmd = true;
        action({
            ...options,
            type: 'wx-alipay'
        });
    });

program
    .version(packageJson.version)
    .command('wx-amap')
    .action(function () {
        specialtypeCmd = true;
        action({
            ...options,
            type: 'wx-amap'
        });
    });

/**
 * antmove-cli alipay-wx ../wx-app
 */
alipayWxCli(program, function () {
    specialtypeCmd = true;

    action({
        ...options,
        type: 'alipay-wx'
    }
    );
});

/**
 * antmove-cli alipay-baidu ../baidu-app
 */
alipayBaiduCli(program, function () {
    specialtypeCmd = true;

    action({
        ...options,
        type: 'alipay-baidu'
    }
    );
});
 
program.parse(process.argv);

if (!specialtypeCmd) {
    action(options);
}

/**
 * cmd options
 * @param opts 
 */
function action (options) {
    /**
     * preprocess ouput path
     */
    let buildInfo = {
        'wx-alipay': buildScript,
        'wx-amap': buildScript,
        'alipay-wx': alipayToWx,
        'alipay-baidu': alipayToBaidu
    };

    entryProcess(options, function (opts = {}) {
        let _input = opts.input,
            _output = opts.output ; 
        opts.input = toAbsolutePath(opts.input);
        opts.output = toAbsolutePath(opts.output);
        if (!opts.output) {
            program.help();
            return false;
        }

        if (opts.input === opts.output) {
            console.log(chalk.red('输入输出目录不能为同一个地址。'));
        }

        if (buildInfo[opts.type]) {
            if (opts.type === 'wx-amap') {
                opts.aliType = 'amap';
                process.env.aliType = 'amap';
            }
            recordOptions(opts, _input, _output);
            buildInfo[opts.type](opts);
        } else {
            console.log(chalk.red('编译类型错误，请选择可用的转换类型。'));
        }
    });
}


function toAbsolutePath (target) {
    let dist = target;
    if (!path.isAbsolute(target)) {
        dist = path.join(inputDirPath, target);
    }

    return dist;
}